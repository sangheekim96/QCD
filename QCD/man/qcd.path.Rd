% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qcd.path.R
\name{qcd.path}
\alias{qcd.path}
\title{Solve penalized quantile regression by pathwise coordinate descent for a grid of lambda's with user chosen penalty}
\usage{
qcd.path(
  x,
  y,
  tau,
  funname = c("LASSO", "SCAD", "MCP"),
  a,
  weights = NULL,
  lambda = NULL,
  nlambda = 30,
  nudge = FALSE,
  nudgesd = 0.01,
  standardize = TRUE,
  thresh = 1e-06,
  maxit = 1e+05,
  verbose = TRUE
)
}
\arguments{
\item{x}{n x p design matrix X}

\item{y}{n x 1 vector of response variables Y}

\item{tau}{quantile}

\item{funname}{user chosen "LASSO", "SCAD", and "MCP" as the penalty}

\item{a}{threshold parameter that adjusts constant penalty part for SCAD and MCP (a > 2 for SCAD, a > 1 for MCP)}

\item{weights}{can input different weight for each p coefficients (default is no weights)}

\item{lambda}{vector of lambda gird}

\item{nlambda}{number of lambda grid. automatically calculated if there is no input.}

\item{nudge}{whether nudge will be added when changing lambda (default is nudge = FALSE). recommend set.seed() before the function if nudge is used.}

\item{nudgesd}{user chosen standard deviation of the random nudge (default is 0.01)}

\item{standardize}{whether X will be scaled (default is standardize = TRUE)}

\item{thresh}{threshold of checking whether the coefficients converged}

\item{maxit}{maximum iteration for convergence}

\item{verbose}{whether the iteration number will be printed. verbose = TRUE will print the iteration.}
}
\value{
beta  A n x 1 matrix of coefficients, stored in sparse matrix format

dim  dimension of coefficient matrix

lambda  lambda value used

nobs  number of observations

df  number of nonzero coefficients
}
\description{
Solve penalized quantile regression by pathwise coordinate descent for a grid of lambda's with user chosen penalty
}
\examples{
n = 30; p = 30
x = array(rnorm(n*p), c(n,p))
for (j in 1:p){x[,j] = x[,j]/(norm(as.matrix(x[,j]), type="f")/sqrt(n))}
e = rnorm(n)
b = c(1, -1, rep(0, p-2))
y = x \%*\% b + e

upper = 2; lower = -6
lambda =  2^seq(upper, lower, by = -0.2)

qr.lasso.warm = qcd.path(x = x, y = y, tau = 0.5, funname = "LASSO",
weights = NULL, lambda = lambda, nlambda = length(lambda),
nudge = FALSE, standardize = TRUE,
thresh = 1e-06, maxit = 10000, verbose = TRUE)

set.seed(1)
qr.lasso.warm.nudge = qcd.path(x = x, y = y, tau = 0.5, funname = "LASSO",
weights = NULL, lambda = lambda, nlambda = length(lambda),
nudge = TRUE, nudgesd = 0.01, standardize = TRUE,
thresh = 1e-06, maxit = 10000, verbose = TRUE)
}
