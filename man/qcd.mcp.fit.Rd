% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qcd.mcp.fit.R
\name{qcd.mcp.fit}
\alias{qcd.mcp.fit}
\title{Solve MCP penalized quantile regression by coordinate descent for a single value of lambda}
\usage{
qcd.mcp.fit(x, y, tau, lambda, a, thresh = 1e-06, maxit = 1e+05, warm = NULL)
}
\arguments{
\item{x}{\code{n x p} design matrix X.}

\item{y}{\code{n x 1} vector of response variables Y.}

\item{tau}{Quantile value between 0 and 1.}

\item{lambda}{A single lambda value.}

\item{a}{Threshold parameter that adjusts constant penalty part. (a > 1 for MCP)}

\item{thresh}{Threshold of checking whether the coefficients converged.}

\item{maxit}{Maximum iteration for convergence.}

\item{warm}{Whether warm start will be used.
Do not use this argument when only running \code{qcd.lasso.fit}.
It is used when constructing regularization path with \code{qcd.path} later.}
}
\value{
\item{beta}{A \code{n x 1} matrix of coefficients.}

\item{dim}{Dimension of coefficient vector.}

\item{lambda}{Lambda value used.}

\item{df}{Number of nonzero coefficients.}
}
\description{
Solve MCP penalized quantile regression by coordinate descent for a single value of lambda
}
\examples{
## Create sample data set
n <- 30; p <- 30
x <- array(rnorm(n*p), c(n,p))
for (j in 1:p){x[,j] = x[,j]/(norm(as.matrix(x[,j]), type="f")/sqrt(n))}
e <- rnorm(n)
b <- c(1, -1, rep(0, p-2))
y <- x \%*\% b + e

## Use QCD algorithm to solve SCAD penalized quantile regression with one lambda
qr.mcp <- qcd.mcp.fit(x = x, y = y, tau = 0.5, lambda = 0.1, a = 2.2,
thresh = 1e-06, maxit = 100)


}
